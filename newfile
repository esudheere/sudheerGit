
resource "azurerm_kubernetes_cluster" "aks_cluster" {

lifecycle {
    ignore_changes = [ "default_node_pool.0.node_count" ]
  }

  name                          = var.cluster_name              
  location                      = var.location
  resource_group_name           = var.resource_group_name
  dns_prefix                    = var.dns_prefix
  kubernetes_version            = var.kubernetes_version
  private_cluster_enabled       = var.private_cluster_enabled
  sku_tier                      = var.sla_sku
  
  default_node_pool {
    name                        = var.worker_node_pool_name     
    orchestrator_version        = var.kubernetes_version
    node_count                  = var.agent_count
    enable_auto_scaling         = var.enable_auto_scaling
    max_pods                    = var.max_pods
    vm_size                     = var.vm_size
    os_disk_size_gb             = var.os_disk_size_gb
    vnet_subnet_id              = var.subnet_id
    node_labels                 = var.default_node_pool.labels
    node_taints                 = var.default_node_pool.taints
  }

##  service_principal {
##    client_id     = var.client_id
##    client_secret = var.client_secret
##  }

###Managed Identity

identity {
    type = "SystemAssigned"
  }

role_based_access_control {
    enabled = true
    azure_active_directory {
      managed = true
      admin_group_object_ids = [
        data.azuread_group.aks.id
       ]
                            ###client_app_id     = var.client_app_id
                            ###server_app_id     = var.server_app_id
                            ###server_app_secret = var.server_app_secret
                            ###tenant_id         = var.tenant_id
    }
  }

### ssh-key
  linux_profile {
    admin_username = var.admin_username
    ssh_key {
      key_data = var.ssh_public_key
    }

  network_profile {

    docker_bridge_cidr = var.docker_bridge_cidr
    dns_service_ip     = var.dns_service_ip
    service_cidr       = var.service_cidr
    network_plugin     = var.network_plugin
###Network Policy
    network_policy     = "azure"
    load_balancer_sku  = var.load_balancer_sku
  }

 addon_profile {
    oms_agent {
      enabled                    = var.addons.oms_agent
      log_analytics_workspace_id = var.log_analytics_workspace_id
    }
    
    azure_policy {
      enabled = var.addons.azure_policy
    }
  }

### container registry access

data "azurerm_container_registry" "mashreq_acr" {
  name                = "myregistry"
  resource_group_name = "registry-rg"
}


resource "azurerm_role_assignment" "acrpull_role" {
  scope                            = azurerm_container_registry.mashreq_acr.id
  role_definition_name             = "AcrPull"
  ###principal_id                  = data.azuread_service_principal.aks_principal.id
  principal_id                     = azurerm_kubernetes_cluster.aks.kubelet_identity[0].object_id
  skip_service_principal_aad_check = true
}

### Role assignment for Kubernetes Admin - AKS contributor

resource "azurerm_role_assignment" "kube_admin_role" {
  scope                            = azurerm_kubernetes_cluster.kubernetes_cluster
  role_definition_name             = "Contributor"
  principal_id                     = data.azuread_service_principal.aks_principal.id
  skip_service_principal_aad_check = true
}

### Role assignment for MAshreqAksServer - Contributor for AKS and Network

resource "azurerm_role_assignment" "MashreqAksServer_role" {
  scope                            = azurerm_kubernetes_cluster.kubernetes_cluster
  role_definition_name             = "Contributor"
  ##principal_id                   = data.azuread_service_principal.aks_principal.id
  principal_id                     = azurerm_kubernetes_cluster.aks.identity[0].principal_id
  skip_service_principal_aad_check = true
}

### Role assignment for DevOps - Aks Reader

resource "azurerm_role_assignment" "devops_admin_role" {
  scope                            = azurerm_kubernetes_cluster.kubernetes_cluster
  role_definition_name             = "Azure Kubernetes Service Cluster User Role"
  principal_id                     = data.azuread_service_principal.aks_principal.id
  skip_service_principal_aad_check = true
}


###RBAC should be changed to managed

  tags = var.tags  
}
